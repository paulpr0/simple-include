use std::fs::{self, File};
use std::io::Write;
use std::path::Path;

use simple_include::{list_of_paths, normalize_path, process_file};
use tempfile::tempdir;

#[test]
fn test_process_file_with_includes() {
    let temp_dir = tempdir().unwrap();
    let src_dir = temp_dir.path().join("src");
    let target_dir = temp_dir.path().join("target");

    fs::create_dir_all(&src_dir).unwrap();
    fs::create_dir_all(&target_dir).unwrap();

    let main_file_path = src_dir.join("main.txt");
    let include_file_path = src_dir.join("include.txt");

    let mut main_file = File::create(&main_file_path).unwrap();
    writeln!(main_file, "--include include.txt").unwrap();
    writeln!(main_file, "This is the main file.").unwrap();

    let mut include_file = File::create(&include_file_path).unwrap();
    writeln!(include_file, "This is the included file.").unwrap();

    let result = process_file(
        &main_file_path,
        &target_dir.join("main.txt"),
        "--include",
        true,
    );

    assert!(result.is_ok());
    let included_files = result.unwrap();
    assert_eq!(included_files.len(), 1);
    assert_eq!(included_files[0], normalize_path(&include_file_path));

    let output_content = fs::read_to_string(target_dir.join("main.txt")).unwrap();
    assert!(output_content.contains("This is the included file."));
    assert!(output_content.contains("This is the main file."));
}

#[test]
fn test_process_file_with_non_utf8_include() {
    let temp_dir = tempdir().unwrap();
    let src_dir = temp_dir.path().join("src");
    let target_dir = temp_dir.path().join("target");

    fs::create_dir_all(&src_dir).unwrap();
    fs::create_dir_all(&target_dir).unwrap();

    let main_file_path = src_dir.join("main.txt");
    let include_file_path = src_dir.join("include.bin");

    let mut main_file = File::create(&main_file_path).unwrap();
    writeln!(main_file, "--include include.bin").unwrap();
    writeln!(main_file, "This is the main file.").unwrap();

    let mut include_file = File::create(&include_file_path).unwrap();
    include_file.write_all(&[0, 159, 146, 150]).unwrap(); // Some non-UTF-8 bytes

    let result = process_file(
        &main_file_path,
        &target_dir.join("main.txt"),
        "--include",
        true,
    );

    assert!(result.is_ok());
    let included_files = result.unwrap();
    assert_eq!(included_files.len(), 1);
    assert_eq!(included_files[0], normalize_path(&include_file_path));

    let output_content = fs::read_to_string(target_dir.join("main.txt")).unwrap();
    assert!(output_content.contains("This is the main file."));
    assert!(!output_content.contains("This is the included file."));
}

#[test]
fn test_list_of_paths() {
    let temp_dir = tempdir().unwrap();
    let src_dir = temp_dir.path().join("src");
    let target_dir = temp_dir.path().join("target");

    fs::create_dir_all(&src_dir).unwrap();
    fs::create_dir_all(&target_dir).unwrap();

    let file1_path = src_dir.join("file1.txt");
    let file2_path = src_dir.join("file2.txt");

    File::create(&file1_path).unwrap();
    File::create(&file2_path).unwrap();

    let paths = list_of_paths(&src_dir, &target_dir).unwrap();
    assert_eq!(paths.len(), 2);
    assert!(paths.contains(&file1_path));
    assert!(paths.contains(&file2_path));
}
